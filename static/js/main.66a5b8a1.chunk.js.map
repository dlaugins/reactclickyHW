{"version":3,"sources":["components/Header.js","components/Section.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["styles","headerStyle","backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","opacity","headingStyle","fontSize","height","position","headingSubStyle","marginRight","marginLeft","fontWeight","Header","react_default","a","createElement","style","className","disney","background","border","weight","Section","state","data","Data","handleIncrement","key","_this","clicked","props","updateScore","click","handleClick","this","setState","clickData","console","log","gameOver","i","length","sort","Math","random","_this2","map","item","index","src","image","alt","width","onClick","Component","navbarStyle","color","Navbar","score","topScore","App","finished","newScore","components_Navbar","components_Header","components_Section","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.66a5b8a1.chunk.js","sourcesContent":["import React from \"react\";\n\n\n// By importing the Header.css file, it is added to the DOM whenever this component loads\n\n// We can also style a component inside of its JavaScript file by adding style properties to its rendered elements\n// Unlike regular HTML, a JSX style property must be an object instead of a string\n// On a style object, we camelCase all property names, and put all of the values in quotes\n// Non quoted values default to \"pixels\", e.g. height, margin, padding\n\nconst styles = {\n  headerStyle: {\n    backgroundImage:\"url(\" + \"https://tse2.mm.bing.net/th?id=OIP.FzAl6D4GENt1Wx-_0ImqkQHaDg&pid=15.1&P=0&w=323&h=154\" + \")\",\n    backgroundPosition: 'center',\n    backgroundSize: 'cover',\n    backgroundRepeat: 'no-repeat',\n    opacity: \"50\"\n  },\n  headingStyle: {\n    fontSize: 100,\n    height: \"300px\",\n    position: \"center\"\n\n  },\n  headingSubStyle: {\n    fontSize: 50,\n    position: \"center\",\n    marginRight: \"15px\",\n    marginLeft: \"15px\",\n    fontWeight:\"bold\"\n\n  }\n};\n\n// We use JSX curly braces to evaluate the style object\n\nfunction Header() {\n  return (\n    <header style={styles.headerStyle} className=\"header\">\n      <div className=\"row\">\n        <div className=\"col-2\"></div>\n        <div className=\"col-8\">\n          <h1 style={styles.headingStyle}>Clicky Game!</h1>\n        </div>\n        <div className=\"col-2\" ></div>\n      </div>\n      <div className=\"row\">\n          <h1 style={styles.headingSubStyle}>Click on an image to earn points, \n          but don't click on any more than once! </h1>\n     </div >\n    </header >\n  );\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport Data from \"../data.json\";\n\n\n// By importing the Section.css file, it is added to the DOM whenever this component loads\n\n// We can also style a component inside of its JavaScript file by adding style properties to its rendered elements\n// Unlike regular HTML, a JSX style property must be an object instead of a string\n// On a style object, we camelCase all property names, and put all of the values in quotes\n// Non quoted values default to \"pixels\", e.g. height, margin, padding\n\nconst styles = {\n disney: {\n   background: \"white\",\n   border:\"10px solid blue\",\n   height:\"150px\",\n   weight:\"150px\"\n }\n};\n\n// We use JSX curly braces to evaluate the style object on the JSX tag\n// console.log(this.state.Data)\nclass Section extends Component {\n\n  state = {\n    data: Data,\n  }\n  componentDidMount() {\n    this.setState({ data: Data });\n  }\n\n  handleClick(key) {\n    let clickData = this.state.data;\n\n    console.log(\"key\", key, \"clicked\", clickData[key].clicked);\n    let gameOver=false\n\n    if (clickData[key].clicked) {\n      gameOver = true;\n      console.log(\"game over\");\n      for (var i = 0; i < clickData.length; i++) {\n        clickData[i].clicked = false;\n      }\n    }\n    else {\n      clickData[key].clicked = true;\n    }\n    this.setState({ data: clickData.sort(() => 0.5 - Math.random()) });\n    this.props.updateScore(gameOver)\n  }\n\n  handleIncrement = (key) => {\n    if (!this.state.data[key].clicked) {\n      this.props.updateScore(false);\n    }\n  };\n\n  click = (key) => {\n    this.handleIncrement(key)\n    this.handleClick(key)\n\n  }\n\n  render(props) {\n    return (\n      // <div>section</div>\n      <div>\n        <div>\n          {\n            this.state.data.map((item, index) =>\n              <img src={item.image} style = {styles.disney} key={index}\n                className=\"disney\" alt=\"disney\" height=\"120\" width=\"120\" onClick={() => this.click(index)} />\n            )\n          }\n        </div>\n        {/* <span onClick={() => props.updateScore(props.score)} className=\"updateScore\"> */}\n        {/* </span> */}\n      </div>\n    )\n  }\n}\n\nexport default Section;","import React, { Component } from \"react\";\n\n\n// By importing the Navbar.css file, it is added to the DOM whenever this component loads\n\n// We can also style a component inside of its JavaScript file by adding style properties to its rendered elements\n// Unlike regular HTML, a JSX style property must be an object instead of a string\n// On a style object, we camelCase all property names, and put all of the values in quotes\n// Non quoted values default to \"pixels\", e.g. height, margin, padding\n\nconst styles = {\n  navbarStyle: {\n    background: \"blue\",\n    height: \"100px\",\n    fontSize: \"25px\",\n    fontWeight: \"bold\",\n    color:\"White\"\n  }\n};\n\n// We use JSX curly braces to evaluate the style object on the JSX tag\n\n\nfunction Navbar(props) {\n  return (\n    <nav style={styles.navbarStyle} className=\"navbar\">\n        <div className=\"row\">\n          <div className=\"col-2\">CLICKY GAME</div>\n          <div className=\"col-5\">Click an Image to begin!</div>\n          <div className=\"col-2\">Score: {props.score} </div>\n          <div className=\"col-3\" >Top Score: {props.topScore}</div>\n        </div>\n     </nav>\n  )};\nexport default Navbar;\n","import React, { Component } from 'react';\nimport Header from \"./components/Header\";\nimport Section from \"./components/Section\";\nimport Navbar from \"./components/Navbar\";\n\n\nclass App extends Component {\n\n  state = {\n    score: 0,\n    topScore: 0\n  }\n\n  updateScore = (finished => {\n    console.log(\"updateScore\", finished, \"score\", this.state.score, \"topsscore\", this.state.topScore)\n    if (finished) {\n      if (this.state.score > this.state.topScore) {\n        console.log(\"newTopscore\", this.props.score)\n        let topScore = this.state.score;\n        this.setState({ topScore: topScore, score: 0 });\n        console.log(\"topScore\", topScore);\n      }\n      else{\n        this.setState({ score: 0 });\n      }\n    }\n    else {\n      let newScore = this.state.score + 1;\n      this.setState({ score: newScore });\n      // console.log(\"newScore\",newScore);\n    }\n  })\n  render() {\n    console.log(this.state)\n    return (\n      <div className=\"App\">\n        <Navbar score={this.state.score} topScore={this.state.topScore} />\n\n        <Header />\n        <Section updateScore={this.updateScore} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}